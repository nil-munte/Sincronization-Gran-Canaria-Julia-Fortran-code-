INSTRUCTIONS TO COMPILE AND EXECUTE THE CODE IN f90model-main

Original code: https://gitlab.ifisc.uib-csic.es/power-grid/f90model/

Firstly, this code has to be executed in a Linux OS (such as Ubuntu). If your computer does not have Linux, a VM (such as VirtualBox) is also a good option, workable in MacOS/Windows machine.

Once the Linux OS is working, the Intel Fortran Compiler needs to be installed. For this reason, the Intel HPC Toolkit needs to be installed. It can be downloaded from https://www.intel.com/content/www/us/en/developer/tools/oneapi/hpc-toolkit-download.html.

Finally, check on terminal that the Fortran compiler is correctly installed and detected by doing: ifort --version. In case it is not working, check how to add it to the PATH.

Finally, make sure that you are on the f90model-main file (using "cd f90model-main"). Then:
- To compile: ifort -qmkl grid_implicit_sparse.f90 -o exe
- To execute: ./exe

Inside the results files, a .dat file with the frequency fluctuations will be generated.

IMPORTANT: on the file grid_implicit_sparse.f90, the original include include 'mkl_pardiso.f90' has to be changed to include 'mkl_pardiso.fi' so it works.

Other details: 
- The parameters.dat file includes some data needed in the main program (grid_implicit_sparse.f90). There are many modifications of this folder, that if wanted to be used, its name has to be specified in grid_implicit_sparse.f90.
- Inside the folder dispatch, the dispatch.dat file contains information needed in the main program for each dispatch (156 dispatches of 10 minutes each). There are also many modifications of this file. If one of them is wanted to be used, its name has to be specified in the used parameters file.
- Outside the folder f90model-main, there are:
	- 02-Python files: used to modify the networks (parameters files) and apply different approaches (change Bij, increase wind equally for n new nodes, split the used wind to n new nodes, etc.) On the python code file, and the corresponding modified files, the n accounts for 'n added nodes' and N for 'multiplication wind factor (xN).
	- 02-Matlab files: MATLAB files are used to represent the results from frequency and power fluctuations (stored on the folder 'results'), with different files for each different approach. Some results (approaches) are not shown on documentation but can be easily obtained by executing the Matlab files.
	- The f90model-main.zip contains the original implementation from the referenced paper.

In the document '09-Power Grid Frequency Fluctuations [cat]' more specific information is explained and the representations are shown.

---

Bij, from lines, is calculated as Vij^2/Zij. 

The lines voltage Vij is taken from https://www.energiagrancanaria.com/wp-content/uploads/2021/04/anuarioenergeticocanarias-2019.pdf

The line impedance is calculated as Z = 0.4 (Ohm/km) x line_length (km) / number_of_lines.

The 0.4 comes from Figure 3 from [Athari 2018], where it can be seen that the reactance does not depend of voltage. Resistance depends of voltage (Figure 11) but it is not considered on the calculation of Z. The number of lines is due to in a real network double lines can appear, but in this model just one line is considered (therefore, number_of_lines = 1). The line_length can be approximated from the real maps, such as Google Maps, linearly.

Since Vij is something fixed, Zij is something more variable. It has been observed, but not represented, that for Bij < 1 (approximately can also be 1.5-2 depending on the simulation) the fluctuations tend to be very big and could cause problems. This can be for very long lines, and it is an object of further study.

---

Other useful information:
- There are 156 dispatches empirically obtained from: https://demanda.ree.es/visiona/peninsula/demandaqh/total. Each dispatch lasts 10 minutes and each time step takes 1 second. Therefore the total duration of a capture is of 93699 seconds, this is, 26 hours. There are two original files: one from 07-02-2018 and another one from 08-02-2018, taking one hour before and after from the day before and after, respectively.
- The data from the csv files is the total programmed power and the 'real' power generated by each technology. From this data, Pref for each power plant is estimated for each dispatch. The real power Is distributed proportionally to the installed power for each plant. For instance, if 5 MW are generated, and plant 1 has 10 MW installed (of gas), and plant 2 has 20 MW, the generated power by plant 1 will be 5*10/10 and by plant 2 5*20/30. Once the real power from each plant is calculated, this values are rescaled to the total programmed power to obtain the programmed power for each plant (Pref0).
- The total programmed power is constant for each 1 hour, while the real power changes every 10 minutes. Since the will is to maintain constant the Pref from each plant for 1 hour, we get the value of Pref0 in the half of the hour and we keep it constant for the whole hour. For instance, if Pref0 is 10, 12, 14, 11, 13 and 16 MW at 2:00, 2:10, 2:20, 2:30, 2:40 and 2:50, respectively, then Pref will be 11 during this whole hour. 
- If one plant turns on/off in the half of an hour, Pref is not constant during that hour, and it reflects the turn on/of in the corresponding minute. In this case, the other Pref are adjusted so that the Toal programmed power is the adequate.
- The frequency fluctuations represented are from node 1 of the network, but it has the same result on the other nodes, so it is acceptable to do so. However, it has to be checked that if on the power plant nodes the frequency fluctuations are also the same or more pronunciated. This is something that could be deeply observed.